package in.andante.camerapre;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.view.Display;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;

public class UIView extends View{
	// シャッターボタンの画像
	private Bitmap m_shutterBtnImg = null;
	// スクリーンサイズ横
	private int m_screenW;
	// スクリーンサイズ横
	private int m_screenH;

	@SuppressWarnings("deprecation")
	public UIView(Context context) {
		super(context);

		// スクリーンサイズ横
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display disp = wm.getDefaultDisplay();
        m_screenW = disp.getWidth();
        m_screenH = disp.getHeight();
	}

	// リソースを読み込む．失敗したらfalseを返す．
	public boolean readResource() {
		// シャッターボタンにアプリアイコンを使う
		m_shutterBtnImg = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);
		if(m_shutterBtnImg == null) {
			return false;
		}
		return true;
	}

	@Override
	protected void onDraw(Canvas c) {
		super.onDraw(c);
		if (m_shutterBtnImg == null) {
			return;
		}
		int iconW = m_shutterBtnImg.getWidth();
		int iconH = m_shutterBtnImg.getHeight();

		// アイコンを画面の一番右下に描画する．
		c.drawBitmap(m_shutterBtnImg, m_screenW - iconW, m_screenH - iconH, null);
	}

	// このUI上でのタッチイベントを処理する．
	// @param event 呼び出し元が受け取ったタッチイベント
	// @return このUIで有効な操作があった場合はfalseを返す
	public boolean touch(MotionEvent event) {
		if (m_listener == null) {
			return false;
		}

		// タッチした場所とタッチアクション
		int action = event.getAction();
		int x = (int)event.getX();
		int y = (int)event.getY();
		
		switch (action) {
			case MotionEvent.ACTION_UP: // タッチして指を離した場所を判定する
			{
				int iconW = m_shutterBtnImg.getWidth();
				int iconH = m_shutterBtnImg.getHeight();
				int iconX = m_screenW - iconW;
				int iconY = m_screenH - iconH;
				
				// アイコンをタッチしていたらシャッター操作を通知
				if (iconX < x && iconX + iconW > x && iconY < y && iconY + iconH > y ) {
					m_listener.onShutterButton();
				}
			}
			return true;
		}
		return false;
	}

	// 操作を通知するリスナー
	IUIListener m_listener = null;
	public void setUIListenner(IUIListener l) {
		m_listener = l;
	}
}
